//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/_Game/Control/PlayerKeyMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerKeyMap : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerKeyMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerKeyMap"",
    ""maps"": [
        {
            ""name"": ""PlayerInputEvents"",
            ""id"": ""d0bcab73-954b-4a51-81e0-9303424caf39"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""d83a1f0f-77c6-455d-823a-d03162207d69"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveX"",
                    ""type"": ""Value"",
                    ""id"": ""ca69efb4-7e99-486b-882a-c1f0b3fcc7bf"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MoveY"",
                    ""type"": ""Value"",
                    ""id"": ""871e5a69-d230-427b-a2df-a0bf78bbba2b"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Mear"",
                    ""type"": ""Button"",
                    ""id"": ""1c57ef1c-ccd4-4aa5-a00e-6e1011451fd1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Hold"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Point"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6f436623-d64d-43ec-b282-39586fa393f6"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""10064afd-b4de-4308-812f-8d1e719c2326"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a63fb342-1875-4227-ba86-eb87f5f97cb3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""817bf622-f827-4a34-9285-dda0f49edd02"",
                    ""path"": ""<Gamepad>/leftStick/x"",
                    ""interactions"": """",
                    ""processors"": ""Normalize(min=-1,max=1)"",
                    ""groups"": """",
                    ""action"": ""MoveX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""40a2b695-6a60-49f8-b918-604f12866364"",
                    ""path"": ""<Gamepad>/dpad/x"",
                    ""interactions"": """",
                    ""processors"": ""Normalize(min=-1,max=1)"",
                    ""groups"": """",
                    ""action"": ""MoveX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d4cd5dce-5b4d-4493-ba9d-db86fbdbe950"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": ""Normalize(max=-1)"",
                    ""groups"": """",
                    ""action"": ""MoveX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""30ba993e-d075-4514-987b-aee413852fe6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": ""Normalize(max=1)"",
                    ""groups"": """",
                    ""action"": ""MoveX"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""de05d058-345a-43d4-8667-15bbe7ce2566"",
                    ""path"": ""<Gamepad>/leftStick/y"",
                    ""interactions"": """",
                    ""processors"": ""Normalize(min=-1,max=1)"",
                    ""groups"": """",
                    ""action"": ""MoveY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ebe5072c-5cac-4885-9b98-7f04b07b109f"",
                    ""path"": ""<Gamepad>/dpad/y"",
                    ""interactions"": """",
                    ""processors"": ""Normalize(min=-1,max=1)"",
                    ""groups"": """",
                    ""action"": ""MoveY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a577f9be-424a-4024-b188-39446352cde8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": ""Normalize(max=1)"",
                    ""groups"": """",
                    ""action"": ""MoveY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""806e9898-445d-4e6f-9263-ee8c95b26763"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": ""Normalize(max=-1)"",
                    ""groups"": """",
                    ""action"": ""MoveY"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a8fe5a4c-397e-47fa-9071-7c3617258fcd"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mear"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7872e5f4-a683-4cf3-83e8-ca6b6b6b252a"",
                    ""path"": ""<VirtualMouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0df6ad66-40e0-4cb9-b2ea-6d1b755c88b0"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": ""StickDeadzone"",
                    ""groups"": """",
                    ""action"": ""Point"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerInputEvents
        m_PlayerInputEvents = asset.FindActionMap("PlayerInputEvents", throwIfNotFound: true);
        m_PlayerInputEvents_Attack = m_PlayerInputEvents.FindAction("Attack", throwIfNotFound: true);
        m_PlayerInputEvents_MoveX = m_PlayerInputEvents.FindAction("MoveX", throwIfNotFound: true);
        m_PlayerInputEvents_MoveY = m_PlayerInputEvents.FindAction("MoveY", throwIfNotFound: true);
        m_PlayerInputEvents_Mear = m_PlayerInputEvents.FindAction("Mear", throwIfNotFound: true);
        m_PlayerInputEvents_Point = m_PlayerInputEvents.FindAction("Point", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerInputEvents
    private readonly InputActionMap m_PlayerInputEvents;
    private IPlayerInputEventsActions m_PlayerInputEventsActionsCallbackInterface;
    private readonly InputAction m_PlayerInputEvents_Attack;
    private readonly InputAction m_PlayerInputEvents_MoveX;
    private readonly InputAction m_PlayerInputEvents_MoveY;
    private readonly InputAction m_PlayerInputEvents_Mear;
    private readonly InputAction m_PlayerInputEvents_Point;
    public struct PlayerInputEventsActions
    {
        private @PlayerKeyMap m_Wrapper;
        public PlayerInputEventsActions(@PlayerKeyMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_PlayerInputEvents_Attack;
        public InputAction @MoveX => m_Wrapper.m_PlayerInputEvents_MoveX;
        public InputAction @MoveY => m_Wrapper.m_PlayerInputEvents_MoveY;
        public InputAction @Mear => m_Wrapper.m_PlayerInputEvents_Mear;
        public InputAction @Point => m_Wrapper.m_PlayerInputEvents_Point;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInputEvents; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInputEventsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerInputEventsActions instance)
        {
            if (m_Wrapper.m_PlayerInputEventsActionsCallbackInterface != null)
            {
                @Attack.started -= m_Wrapper.m_PlayerInputEventsActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_PlayerInputEventsActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_PlayerInputEventsActionsCallbackInterface.OnAttack;
                @MoveX.started -= m_Wrapper.m_PlayerInputEventsActionsCallbackInterface.OnMoveX;
                @MoveX.performed -= m_Wrapper.m_PlayerInputEventsActionsCallbackInterface.OnMoveX;
                @MoveX.canceled -= m_Wrapper.m_PlayerInputEventsActionsCallbackInterface.OnMoveX;
                @MoveY.started -= m_Wrapper.m_PlayerInputEventsActionsCallbackInterface.OnMoveY;
                @MoveY.performed -= m_Wrapper.m_PlayerInputEventsActionsCallbackInterface.OnMoveY;
                @MoveY.canceled -= m_Wrapper.m_PlayerInputEventsActionsCallbackInterface.OnMoveY;
                @Mear.started -= m_Wrapper.m_PlayerInputEventsActionsCallbackInterface.OnMear;
                @Mear.performed -= m_Wrapper.m_PlayerInputEventsActionsCallbackInterface.OnMear;
                @Mear.canceled -= m_Wrapper.m_PlayerInputEventsActionsCallbackInterface.OnMear;
                @Point.started -= m_Wrapper.m_PlayerInputEventsActionsCallbackInterface.OnPoint;
                @Point.performed -= m_Wrapper.m_PlayerInputEventsActionsCallbackInterface.OnPoint;
                @Point.canceled -= m_Wrapper.m_PlayerInputEventsActionsCallbackInterface.OnPoint;
            }
            m_Wrapper.m_PlayerInputEventsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @MoveX.started += instance.OnMoveX;
                @MoveX.performed += instance.OnMoveX;
                @MoveX.canceled += instance.OnMoveX;
                @MoveY.started += instance.OnMoveY;
                @MoveY.performed += instance.OnMoveY;
                @MoveY.canceled += instance.OnMoveY;
                @Mear.started += instance.OnMear;
                @Mear.performed += instance.OnMear;
                @Mear.canceled += instance.OnMear;
                @Point.started += instance.OnPoint;
                @Point.performed += instance.OnPoint;
                @Point.canceled += instance.OnPoint;
            }
        }
    }
    public PlayerInputEventsActions @PlayerInputEvents => new PlayerInputEventsActions(this);
    public interface IPlayerInputEventsActions
    {
        void OnAttack(InputAction.CallbackContext context);
        void OnMoveX(InputAction.CallbackContext context);
        void OnMoveY(InputAction.CallbackContext context);
        void OnMear(InputAction.CallbackContext context);
        void OnPoint(InputAction.CallbackContext context);
    }
}
