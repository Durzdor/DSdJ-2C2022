//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/_Game/Control/PlayerKeyMap.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerKeyMap : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerKeyMap()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerKeyMap"",
    ""maps"": [
        {
            ""name"": ""PlayerInputEvents"",
            ""id"": ""d0bcab73-954b-4a51-81e0-9303424caf39"",
            ""actions"": [
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""d83a1f0f-77c6-455d-823a-d03162207d69"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""ca69efb4-7e99-486b-882a-c1f0b3fcc7bf"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""PassThrough"",
                    ""id"": ""41f724ea-0f6e-4a57-9810-72f8825d372a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""10064afd-b4de-4308-812f-8d1e719c2326"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a63fb342-1875-4227-ba86-eb87f5f97cb3"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""e795528a-3571-4934-ab24-bf4ce974912d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""ae484380-069f-463c-aa64-2ca3739ec9b2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""fdf99921-a4e9-4821-aea7-7a7c0a887f26"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""135a7778-b37e-4fb5-9af5-bbbc739463d7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""4a427201-f303-4ca5-bc51-d1c819c653ec"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a0160425-e656-43c4-a5bb-572cdfbe6797"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5497c0c4-8bc9-4a8f-834a-e34ec09e7855"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fe1b8842-6efb-4a8a-89f6-c4e4f54e2ea2"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // PlayerInputEvents
        m_PlayerInputEvents = asset.FindActionMap("PlayerInputEvents", throwIfNotFound: true);
        m_PlayerInputEvents_Attack = m_PlayerInputEvents.FindAction("Attack", throwIfNotFound: true);
        m_PlayerInputEvents_Move = m_PlayerInputEvents.FindAction("Move", throwIfNotFound: true);
        m_PlayerInputEvents_Look = m_PlayerInputEvents.FindAction("Look", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerInputEvents
    private readonly InputActionMap m_PlayerInputEvents;
    private IPlayerInputEventsActions m_PlayerInputEventsActionsCallbackInterface;
    private readonly InputAction m_PlayerInputEvents_Attack;
    private readonly InputAction m_PlayerInputEvents_Move;
    private readonly InputAction m_PlayerInputEvents_Look;
    public struct PlayerInputEventsActions
    {
        private @PlayerKeyMap m_Wrapper;
        public PlayerInputEventsActions(@PlayerKeyMap wrapper) { m_Wrapper = wrapper; }
        public InputAction @Attack => m_Wrapper.m_PlayerInputEvents_Attack;
        public InputAction @Move => m_Wrapper.m_PlayerInputEvents_Move;
        public InputAction @Look => m_Wrapper.m_PlayerInputEvents_Look;
        public InputActionMap Get() { return m_Wrapper.m_PlayerInputEvents; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInputEventsActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerInputEventsActions instance)
        {
            if (m_Wrapper.m_PlayerInputEventsActionsCallbackInterface != null)
            {
                @Attack.started -= m_Wrapper.m_PlayerInputEventsActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_PlayerInputEventsActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_PlayerInputEventsActionsCallbackInterface.OnAttack;
                @Move.started -= m_Wrapper.m_PlayerInputEventsActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_PlayerInputEventsActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_PlayerInputEventsActionsCallbackInterface.OnMove;
                @Look.started -= m_Wrapper.m_PlayerInputEventsActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_PlayerInputEventsActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_PlayerInputEventsActionsCallbackInterface.OnLook;
            }
            m_Wrapper.m_PlayerInputEventsActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
            }
        }
    }
    public PlayerInputEventsActions @PlayerInputEvents => new PlayerInputEventsActions(this);
    public interface IPlayerInputEventsActions
    {
        void OnAttack(InputAction.CallbackContext context);
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
    }
}
